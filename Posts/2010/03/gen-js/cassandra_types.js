//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
ConsistencyLevel = { 
'ZERO' : 0
,'ONE' : 1
,'QUORUM' : 2
,'DCQUORUM' : 3
,'DCQUORUMSYNC' : 4
,'ALL' : 5
}
VERSION = '0.5.1'
Column = function(args){
this.name = ''
this.value = ''
this.timestamp = 0
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.value)
this.value = args.value
if (null != args.timestamp)
this.timestamp = args.timestamp
}}
Column.prototype = {}
Column.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
  var ret = input.readFieldBegin()
  var fname = ret.fname
  var ftype = ret.ftype
  var fid   = ret.fid
  if (ftype == Thrift.Type.STOP) 
    break
  switch(fid)
  {
    case 1:    if (ftype == Thrift.Type.STRING) {
      var rtmp = input.readString()
this.name = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    case 2:    if (ftype == Thrift.Type.STRING) {
      var rtmp = input.readString()
this.value = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    case 3:    if (ftype == Thrift.Type.I64) {
      var rtmp = input.readI64()
this.timestamp = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    default:
      input.skip(ftype)
  }
  input.readFieldEnd()
}
input.readStructEnd()
return
}

Column.prototype.write = function(output){ 
output.writeStructBegin('Column')
if (null != this.name) {
  output.writeFieldBegin('name', Thrift.Type.STRING, 1)
  output.writeString(this.name)
  output.writeFieldEnd()
}
if (null != this.value) {
  output.writeFieldBegin('value', Thrift.Type.STRING, 2)
  output.writeString(this.value)
  output.writeFieldEnd()
}
if (null != this.timestamp) {
  output.writeFieldBegin('timestamp', Thrift.Type.I64, 3)
  output.writeI64(this.timestamp)
  output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

SuperColumn = function(args){
this.name = ''
this.columns = []
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.columns)
this.columns = args.columns
}}
SuperColumn.prototype = {}
SuperColumn.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
  break
switch(fid)
{
  case 1:  if (ftype == Thrift.Type.STRING) {
    var rtmp = input.readString()
this.name = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 2:  if (ftype == Thrift.Type.LIST) {
    {
      var _size0 = 0
      var rtmp3
      this.columns = []
      var _etype3 = 0
      rtmp3 = input.readListBegin()
      _etype3 = rtmp3.etype
      _size0 = rtmp3.size
      for (var _i4 = 0; _i4 < _size0; ++_i4)
      {
        var elem5 = null
        elem5 = new Column()
        elem5.read(input)
        this.columns.push(elem5)
      }
      input.readListEnd()
    }
  } else {
    input.skip(ftype)
  }
  break
  default:
    input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

SuperColumn.prototype.write = function(output){ 
output.writeStructBegin('SuperColumn')
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 1)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.columns) {
output.writeFieldBegin('columns', Thrift.Type.LIST, 2)
{
  output.writeListBegin(Thrift.Type.STRUCT, this.columns.length)
  {
    for(var iter6 in this.columns)
    {
      iter6=this.columns[iter6]
      iter6.write(output)
    }
  }
  output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

ColumnOrSuperColumn = function(args){
this.column = new Column()
this.super_column = new SuperColumn()
if( args != null ){if (null != args.column)
this.column = args.column
if (null != args.super_column)
this.super_column = args.super_column
}}
ColumnOrSuperColumn.prototype = {}
ColumnOrSuperColumn.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRUCT) {
  this.column = new Column()
  this.column.read(input)
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
  this.super_column = new SuperColumn()
  this.super_column.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ColumnOrSuperColumn.prototype.write = function(output){ 
output.writeStructBegin('ColumnOrSuperColumn')
if (null != this.column) {
output.writeFieldBegin('column', Thrift.Type.STRUCT, 1)
this.column.write(output)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRUCT, 2)
this.super_column.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

NotFoundException = function(args){
}
for (var property in Thrift.Exception)
NotFoundException[property] = Thrift.Exception[property]
NotFoundException.prototype = {}
NotFoundException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

NotFoundException.prototype.write = function(output){ 
output.writeStructBegin('NotFoundException')
output.writeFieldStop()
output.writeStructEnd()
return
}

InvalidRequestException = function(args){
this.why = ''
if( args != null ){if (null != args.why)
this.why = args.why
}}
for (var property in Thrift.Exception)
InvalidRequestException[property] = Thrift.Exception[property]
InvalidRequestException.prototype = {}
InvalidRequestException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.why = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

InvalidRequestException.prototype.write = function(output){ 
output.writeStructBegin('InvalidRequestException')
if (null != this.why) {
output.writeFieldBegin('why', Thrift.Type.STRING, 1)
output.writeString(this.why)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

UnavailableException = function(args){
}
for (var property in Thrift.Exception)
UnavailableException[property] = Thrift.Exception[property]
UnavailableException.prototype = {}
UnavailableException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

UnavailableException.prototype.write = function(output){ 
output.writeStructBegin('UnavailableException')
output.writeFieldStop()
output.writeStructEnd()
return
}

TimedOutException = function(args){
}
for (var property in Thrift.Exception)
TimedOutException[property] = Thrift.Exception[property]
TimedOutException.prototype = {}
TimedOutException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

TimedOutException.prototype.write = function(output){ 
output.writeStructBegin('TimedOutException')
output.writeFieldStop()
output.writeStructEnd()
return
}

ColumnParent = function(args){
this.column_family = ''
this.super_column = ''
if( args != null ){if (null != args.column_family)
this.column_family = args.column_family
if (null != args.super_column)
this.super_column = args.super_column
}}
ColumnParent.prototype = {}
ColumnParent.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column_family = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.super_column = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ColumnParent.prototype.write = function(output){ 
output.writeStructBegin('ColumnParent')
if (null != this.column_family) {
output.writeFieldBegin('column_family', Thrift.Type.STRING, 3)
output.writeString(this.column_family)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRING, 4)
output.writeString(this.super_column)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

ColumnPath = function(args){
this.column_family = ''
this.super_column = ''
this.column = ''
if( args != null ){if (null != args.column_family)
this.column_family = args.column_family
if (null != args.super_column)
this.super_column = args.super_column
if (null != args.column)
this.column = args.column
}}
ColumnPath.prototype = {}
ColumnPath.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column_family = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.super_column = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ColumnPath.prototype.write = function(output){ 
output.writeStructBegin('ColumnPath')
if (null != this.column_family) {
output.writeFieldBegin('column_family', Thrift.Type.STRING, 3)
output.writeString(this.column_family)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRING, 4)
output.writeString(this.super_column)
output.writeFieldEnd()
}
if (null != this.column) {
output.writeFieldBegin('column', Thrift.Type.STRING, 5)
output.writeString(this.column)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

SliceRange = function(args){
this.start = ''
this.finish = ''
this.reversed = false
this.count = 100
if( args != null ){if (null != args.start)
this.start = args.start
if (null != args.finish)
this.finish = args.finish
if (null != args.reversed)
this.reversed = args.reversed
if (null != args.count)
this.count = args.count
}}
SliceRange.prototype = {}
SliceRange.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.start = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.finish = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.reversed = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.count = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

SliceRange.prototype.write = function(output){ 
output.writeStructBegin('SliceRange')
if (null != this.start) {
output.writeFieldBegin('start', Thrift.Type.STRING, 1)
output.writeString(this.start)
output.writeFieldEnd()
}
if (null != this.finish) {
output.writeFieldBegin('finish', Thrift.Type.STRING, 2)
output.writeString(this.finish)
output.writeFieldEnd()
}
if (null != this.reversed) {
output.writeFieldBegin('reversed', Thrift.Type.BOOL, 3)
output.writeBool(this.reversed)
output.writeFieldEnd()
}
if (null != this.count) {
output.writeFieldBegin('count', Thrift.Type.I32, 4)
output.writeI32(this.count)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

SlicePredicate = function(args){
this.column_names = []
this.slice_range = new SliceRange()
if( args != null ){if (null != args.column_names)
this.column_names = args.column_names
if (null != args.slice_range)
this.slice_range = args.slice_range
}}
SlicePredicate.prototype = {}
SlicePredicate.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size7 = 0
var rtmp3
this.column_names = []
var _etype10 = 0
rtmp3 = input.readListBegin()
_etype10 = rtmp3.etype
_size7 = rtmp3.size
for (var _i11 = 0; _i11 < _size7; ++_i11)
{
var elem12 = null
var rtmp = input.readString()
elem12 = rtmp.value
this.column_names.push(elem12)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.slice_range = new SliceRange()
this.slice_range.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

SlicePredicate.prototype.write = function(output){ 
output.writeStructBegin('SlicePredicate')
if (null != this.column_names) {
output.writeFieldBegin('column_names', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRING, this.column_names.length)
{
for(var iter13 in this.column_names)
{
iter13=this.column_names[iter13]
output.writeString(iter13)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.slice_range) {
output.writeFieldBegin('slice_range', Thrift.Type.STRUCT, 2)
this.slice_range.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

KeySlice = function(args){
this.key = ''
this.columns = []
if( args != null ){if (null != args.key)
this.key = args.key
if (null != args.columns)
this.columns = args.columns
}}
KeySlice.prototype = {}
KeySlice.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.key = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
{
var _size14 = 0
var rtmp3
this.columns = []
var _etype17 = 0
rtmp3 = input.readListBegin()
_etype17 = rtmp3.etype
_size14 = rtmp3.size
for (var _i18 = 0; _i18 < _size14; ++_i18)
{
var elem19 = null
elem19 = new ColumnOrSuperColumn()
elem19.read(input)
this.columns.push(elem19)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

KeySlice.prototype.write = function(output){ 
output.writeStructBegin('KeySlice')
if (null != this.key) {
output.writeFieldBegin('key', Thrift.Type.STRING, 1)
output.writeString(this.key)
output.writeFieldEnd()
}
if (null != this.columns) {
output.writeFieldBegin('columns', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.STRUCT, this.columns.length)
{
for(var iter20 in this.columns)
{
iter20=this.columns[iter20]
iter20.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

